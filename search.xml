<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bridged Network Connection Issues</title>
    <url>/03/17/2023/Bridged%20Network%20Connection%20Issues/</url>
    <content><![CDATA[<p>Due to unknown reasons, A bridged issue with VMware could not be resolved.<br><strong>Step 1</strong>: We can find VMware through the <strong>programs</strong> in the control panel, right-click to make changes, and select Repair.<br><strong>Step 2</strong>: If the problem cannot be solved, the likely cause is a previous upgrade to the virtual machine version or inappropriate deletion of VMware’s configuration files, resulting in the disappearance of the network card. At this point, we need to download the VMware installation package and <strong>ccleaner</strong> software.<br><strong>Step 3</strong>: Use the <strong>VMware Workstation</strong> in the control panel to uninstall the installed VMware. Search for the keyword <strong>vm</strong> under the directory <strong>C:\Program Files</strong>, and then delete all files containing <strong>vm</strong>.<br><strong>Step 4</strong>: Use ccleaner to scan the registry. <strong>Select all</strong>, then fix all errors after scanning is complete.<br><strong>Step 5</strong>: Reuse VMware for installation, and all network card and network issues will be resolved.</p>
<hr>
<p>Reference:<br><a href="https://blog.csdn.net/czg13548930186/article/details/77099377">https://blog.csdn.net/czg13548930186/article/details/77099377</a></p>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Troubleshooting</tag>
        <tag>Kali</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware CentOS7 cannot connect to the network</title>
    <url>/01/25/2022/CentOS7-network-connection/</url>
    <content><![CDATA[<ol>
<li>The solution can be done by referring to the previous kali solution. If it doesn’t work, look step 2.</li>
<li>Make sure the button is turned on in the network settings, if this step doesn’t work, look step 3.</li>
<li>Maybe the problem is that the wired icon disappears, try the following code.<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv <span class="regexp">/var/</span>lib<span class="regexp">/NetworkManager /</span>var<span class="regexp">/lib/</span>NetworkManager.bak</span><br></pre></td></tr></table></figure>
Then reboot and test the results.</li>
</ol>
]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>Troubleshooting</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>Cherrytree</title>
    <url>/04/11/2022/Cherrytree/</url>
    <content><![CDATA[<p><strong>Cherrytree</strong> is a good note-taking tool, which has already been installed in Kali. It’s also friendly for the Windows system, just download it from Google, which could be helpful for your study.</p>
]]></content>
      <categories>
        <category>Windows10</category>
      </categories>
      <tags>
        <tag>Installation</tag>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Installation &amp; CVE-2012-2122 Reproduction</title>
    <url>/03/25/2022/Docker-CVE-2012-2122/</url>
    <content><![CDATA[<p>Here are some useful links for reference, I believe they are enough.<br>Note: as for the docker and docker-compose installation and uninstallation, pay attention to some port numbers.</p>
<hr>
<p>References:<br><a href="https://github.com/vulhub/vulhub">https://github.com/vulhub/vulhub</a><br><a href="https://phoenixnap.com/kb/how-to-install-docker-on-debian-10">https://phoenixnap.com/kb/how-to-install-docker-on-debian-10</a><br><a href="https://docs.docker.com/compose/install/#alternative-install-options">https://docs.docker.com/compose/install/#alternative-install-options</a><br><a href="https://docs.docker.com/engine/install/debian/#install-from-a-package">https://docs.docker.com/engine/install/debian/#install-from-a-package</a><br><a href="https://www.cnblogs.com/--kisaragi--/p/15393747.html">https://www.cnblogs.com/--kisaragi--/p/15393747.html</a></p>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>Installation</tag>
        <tag>CVE</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dnsmasq</title>
    <url>/04/18/2022/DNSmasq/</url>
    <content><![CDATA[<p>It’s about an Heap Overflow exploit in dnsmasq before 2.78. I tried to utilize docker to do that, but I failed. When I have more free time in the following two months, I will try to figure it out. The following is the failure screenshot, it seems I need to configure the environment again.<br><img src="/images/kali2022-2022-04-17.png"> </p>
<hr>
<p>Reference:<br><a href="https://github.com/google/security-research-pocs/tree/master/vulnerabilities/dnsmasq">https://github.com/google/security-research-pocs/tree/master/vulnerabilities/dnsmasq</a></p>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Troubleshooting</tag>
        <tag>Kali</tag>
        <tag>CVE</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Forensics Summary</title>
    <url>/04/18/2022/Forensics-Summary/</url>
    <content><![CDATA[<h1 id="Digital-forensics"><a href="#Digital-forensics" class="headerlink" title="Digital forensics"></a>Digital forensics</h1><ol>
<li>Registry keys and their locations </li>
<li>Prefetch files<br>Find from <strong>C:\Windows\Prefetch</strong></li>
<li>Browser history - use <strong>Browsinghistoryview-x64</strong><br>Find from <strong>C:\Users%username%\AppData\Local\Microsoft\Windows\History</strong></li>
<li>Cache - use <strong>IECacheView</strong><br>Find from <strong>C:\Users%USER%\AppData\Local\Microsoft\Windows\WebCache</strong></li>
<li>Cookies - use <strong>IECookieViewer</strong><br>Find from <strong>C:\Users%username%\AppData\Roaming\Microsoft\Windows\Cookies</strong></li>
<li>Windows firewall logs<br>Find from <strong>C:\Windows\system32\logfiles\firewall\pfirewall.log</strong></li>
<li>Windows event logs<br>Find from <strong>C:\Windows\System32\config</strong></li>
<li>If you have full access to the source, the easiest way to determine when a USB was installed<br>Find from <strong>C:\Windows\inf\setupapi.dev.log</strong></li>
<li>OS name and product ID<br>Find from <strong>HKEY_LOCAL_MACHINE\TEST\Microsoft\Windows NT\CurrentVersion 14</strong></li>
<li>Check URLs under NTuser.dat<br>under <strong>raw data\software\microsoft\typed urls</strong></li>
<li>SYSTEM file can show the network connection information</li>
<li>Chrome cache - use ChromeCacheView<br>Find from <strong>C:\Users%username\Desktop\Google\AppData\Local\Google\Chrome\User  Data\default\Cache</strong></li>
<li>Chrome history - use ChromeHistoryView<br>Find from <strong>C:\Users\username\Desktop\Google\AppData\Local\Google\Chrome\User Data\Default\History</strong><br>More useful tools<br>Autopsy, Windows Registry Recovery, RegRipper, Technology Pathways ProDiscover Basic.</li>
</ol>
<h1 id="Network-forensics"><a href="#Network-forensics" class="headerlink" title="Network forensics"></a>Network forensics</h1><ol>
<li>Some useful tools<br>Snort, Security onion, Pfsense, Wireshark, NetworkMiner.</li>
<li>A useful website to practice<br>Find from <strong><a href="https://www.malware-traffic-analysis.net/training-exercises.html">https://www.malware-traffic-analysis.net/training-exercises.html</a></strong> </li>
</ol>
<h1 id="Memory-forensics"><a href="#Memory-forensics" class="headerlink" title="Memory forensics"></a>Memory forensics</h1><ol>
<li>A useful tool - Volatility</li>
<li>Some examples:</li>
</ol>
<p><em>Identify the information for the captured image</em></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">volatility_2</span>.<span class="number">6</span>_win<span class="number">64</span>_standalone.exe -f citadeldc<span class="number">01</span>.mem imageinfo</span><br></pre></td></tr></table></figure>
<p><em>Print process list as a tree</em></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">volatility_2</span>.<span class="number">6</span>_win<span class="number">64</span>_standalone.exe -f citadeldc<span class="number">01</span>.mem --profile=Win<span class="number">8</span>SP<span class="number">1</span>x<span class="number">64</span> pstree</span><br></pre></td></tr></table></figure>
<p><em>Show the running processes</em></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">volatility_2</span>.<span class="number">6</span>_win<span class="number">64</span>_standalone.exe -f citadeldc<span class="number">01</span>.mem --profile=Win<span class="number">8</span>SP<span class="number">1</span>x<span class="number">64</span> pslist</span><br></pre></td></tr></table></figure>
<p><em>Print list of loaded dlls for the Pid 404 process</em></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">volatility_2</span>.<span class="number">6</span>_win<span class="number">64</span>_standalone.exe -f citadeldc<span class="number">01</span>.mem --profile=Win<span class="number">8</span>SP<span class="number">1</span>x<span class="number">64</span> dlllist -p <span class="number">404</span></span><br></pre></td></tr></table></figure>
<p><em>View active &amp; previous network connections</em></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">volatility_2</span>.<span class="number">6</span>_win<span class="number">64</span>_standalone.exe -f citadeldc<span class="number">01</span>.mem --profile=Win<span class="number">8</span>SP<span class="number">1</span>x<span class="number">64</span> connections</span><br></pre></td></tr></table></figure>
<p><em>To find hidden and injected code</em></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">volatility_2</span>.<span class="number">6</span>_win<span class="number">64</span>_standalone.exe -f citadeldc<span class="number">01</span>.mem --profile=Win<span class="number">8</span>SP<span class="number">1</span>x<span class="number">64</span> malfind</span><br></pre></td></tr></table></figure>
<p><em>IE history records</em></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">volatility_2</span>.<span class="number">6</span>_win<span class="number">64</span>_standalone.exe -f citadeldc<span class="number">01</span>.mem --profile=Win<span class="number">8</span>SP<span class="number">1</span>x<span class="number">64</span> iehistory</span><br></pre></td></tr></table></figure>
<p><em>Review the services list</em></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">volatility_2</span>.<span class="number">6</span>_win<span class="number">64</span>_standalone.exe -f citadeldc<span class="number">01</span>.mem --profile=Win<span class="number">8</span>SP<span class="number">1</span>x<span class="number">64</span> svcscan</span><br></pre></td></tr></table></figure>
<h1 id="Live-response-triage"><a href="#Live-response-triage" class="headerlink" title="Live response (triage)"></a>Live response (triage)</h1><p>Use <strong>LiveResponseCollection-Cedarpelta</strong><br>Find from <strong><a href="https://www.brimorlabsblog.com/2019/04/live-response-collection-cedarpelta.html">https://www.brimorlabsblog.com/2019/04/live-response-collection-cedarpelta.html</a></strong></p>
]]></content>
      <categories>
        <category>Windows10</category>
      </categories>
      <tags>
        <tag>Windows10</tag>
        <tag>Forensics</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware Kali cannot connect to the network</title>
    <url>/01/24/2022/Kali-network-connection/</url>
    <content><![CDATA[<p>Sometimes we might encounter a situation that we cannot connect to the network. NAT or bridge mode cannot work, but the interface works well. Besides, we don’t use the network proxy.<br>In this case, we can try to use one of the following three ways to solve this problem.</p>
<ol>
<li>Remove the vitual machine’s network interface and add it again.</li>
<li>Edit <strong>interfaces</strong> under directory <strong>/etc/network</strong> , then add the following codes.<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">auto</span> eth<span class="number">0</span></span><br><span class="line"><span class="attribute">iface</span> eth<span class="number">0</span> inet dhcp</span><br></pre></td></tr></table></figure>
These two lines of code don’t necessarily solve the bridge networking problem</li>
<li>Open the Virtual Network Editor and check the bridged NIC in bridge mode, if it is “Auto”, it is better to change it to the specific NIC name of our PC.<br>Save the changes and reopen the virtual machine to test the results.</li>
</ol>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Troubleshooting</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Nessus Installation</title>
    <url>/02/09/2022/Nessus-Installation/</url>
    <content><![CDATA[<ol>
<li>Download the [amd64.deb] file from official website</li>
<li>Install Debian packages<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">dpkg -<span class="selector-tag">i</span> <span class="selector-attr">[amd64.deb]</span></span><br></pre></td></tr></table></figure></li>
<li>Start service<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/bin/</span>systemctl start nessusd.service</span><br></pre></td></tr></table></figure></li>
<li>Check port<pre><code>netstat -ntpl | grep nessus
</code></pre>
</li>
</ol>
<hr>
<p>References:<br><a href="https://www.tenable.com/downloads/nessus?loginAttempted=true">https://www.tenable.com/downloads/nessus?loginAttempted=true</a><br><a href="https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/27.html">https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/27.html</a><br><a href="https://blog.csdn.net/u012318074/article/details/72354387">https://blog.csdn.net/u012318074/article/details/72354387</a><br><a href="https://www.cnblogs.com/xuyiqing/p/9712892.html">https://www.cnblogs.com/xuyiqing/p/9712892.html</a></p>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>Installation</tag>
      </tags>
  </entry>
  <entry>
    <title>WAMP64 Installation</title>
    <url>/03/29/2022/WAMP64/</url>
    <content><![CDATA[<p>If we have downloaded Visual 2012 and it still doesn’t work, try to use the following link to install <strong>Visual 2015-2022</strong>.<br><a href="https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170">https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170</a><br>As for the missing DLL files, try to use the following two links to download the related files, then move them under <strong>“C:\Windows\SysWOW64”</strong> and <strong>“C:\Windows\System32”</strong> if your machine is (Windows10/8/7/2008r2)64 bits.<br><a href="https://www.dll-files.com/msvcp120.dll.html">https://www.dll-files.com/msvcp120.dll.html</a><br><a href="https://www.dll-files.com/msvcr120.dll.html">https://www.dll-files.com/msvcr120.dll.html</a></p>
<hr>
<p>References:<br><a href="https://blog.csdn.net/weixin_42629862/article/details/85175692">https://blog.csdn.net/weixin_42629862/article/details/85175692</a><br><a href="https://sourceforge.net/projects/wampserver/files/WampServer%203/WampServer%203.0.0/wampserver3.2.6_x64.exe/download">https://sourceforge.net/projects/wampserver/files/WampServer%203/WampServer%203.0.0/wampserver3.2.6_x64.exe/download</a></p>
]]></content>
      <categories>
        <category>Windows10</category>
      </categories>
      <tags>
        <tag>Troubleshooting</tag>
        <tag>Installation</tag>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2022-29072</title>
    <url>/04/22/2022/cve-2022-29072/</url>
    <content><![CDATA[<p>An interesting vulnerability about privilege escalation and 7z.<br>But I don’t think it’s practical. </p>
<hr>
<p>References:<br><a href="https://github.com/kagancapar/CVE-2022-29072">https://github.com/kagancapar/CVE-2022-29072</a></p>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>Merry Christmas!</title>
    <url>/12/25/2021/my-first-blog/</url>
    <content><![CDATA[<p>Hello! This is my first blog.<br>Good luck, good health, good cheer for the coming new year.<br>Just want to test my website, nothing about Cybersecurity here.<br><img src="/images/3.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>MERN Stack Issue when Using DigitalOcean</title>
    <url>/10/03/2023/MERN%20Stack%20Issue%20with%20DigitalOcean/</url>
    <content><![CDATA[<p>When I used the MERN stack service on DigitalOcean and developed a web app by using TypeScript language, I got some HTTP request issues. After modifying the Nginx conf file on the remote server, this issue was solved finally.</p>
]]></content>
      <categories>
        <category>DigitalOcean</category>
      </categories>
      <tags>
        <tag>Troubleshooting</tag>
        <tag>DigitalOcean</tag>
      </tags>
  </entry>
  <entry>
    <title>How to use Armitage</title>
    <url>/07/19/2024/Armitage%20Usage/</url>
    <content><![CDATA[<p>Armitage is an extension of the Metasploit Framework - it adds a Graphical user interface and is written in Java, and is similar to Cobalt Strike. And a more important point is it is free.</p>
<p><strong>OS detection scan</strong><br><img src="/images/Armitage-OS-scan.png"><br><strong>Exploit it via ms17_010_eternalblue</strong> (Drag the payload file to the target machine icon)<br><img src="/images/Armitage-Exploitation.png"> </p>
]]></content>
      <categories>
        <category>C2</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>C2</tag>
      </tags>
  </entry>
  <entry>
    <title>AUTO Dnsmasq 2.78</title>
    <url>/06/30/2025/Dnsmasq%202.78/</url>
    <content><![CDATA[<p>It’s about an Heap Overflow exploit in dnsmasq before 2.78. I failed to reproduce this vulnerability 3 years ago. This time I modified the POC again, then tried to figure it out. I listed the detailed steps below.</p>
<h1 id="Installing-docker-and-apt-utils"><a href="#Installing-docker-and-apt-utils" class="headerlink" title="Installing docker and apt-utils"></a>Installing docker and apt-utils</h1><ol>
<li>   Enter the command: <strong>sudo apt install apt-utils</strong></li>
<li>   Restart the system</li>
<li>   When the system reboots, open a terminal window</li>
<li>   Enter the command <strong>sudo apt install -y docker.io</strong></li>
<li>   Then, Enter the command <strong>sudo systemctl enable docker –now</strong></li>
</ol>
<hr>
<h1 id="Configuring-The-POC"><a href="#Configuring-The-POC" class="headerlink" title="Configuring The POC"></a>Configuring The POC</h1><ol>
<li>   Enter the command : <strong>git clone <a href="https://github.com/google/security-research-pocs.git">https://github.com/google/security-research-pocs.git</a></strong></li>
<li>   Then, Enter the command <strong>cd /security-research-pocs/vulnerabilities/dnsmasq/</strong></li>
<li>   Replace the dockerfile in the directory with the one in appendix A. It has been modernized to run on the current stable distribution of Debian (Bullseye) </li>
<li>   Run the command <strong>docker build -t dnsmasq</strong>.</li>
<li>   Run the command: <strong>docker run –rm -t -i –name dnsmasq_test dnsmasq bash</strong></li>
<li>   This brings up a new terminal: root@<containter_ID>. Take note of this string of characters (example highlighted below). The String of numbers after root is the container ID.<br><img src="/images/container-ID.png"></li>
<li>   In the Terminal application, click on File&gt;New Tab</li>
<li>   In this new tab enter the command:                    <strong>cd /security-research-pocs/vulnerabilities/dnsmasq/</strong></li>
<li>   Then enter the command:                               <strong>docker cp CVE-2017-14491.py dnsmasq_test:/CVE-2017-14491.py</strong></li>
<li>   With the POC script copied over, enter the following command in the terminal: <strong>docker exec -it <container_id> bash</strong></li>
<li>   This should open up a second docker terminal.</li>
<li>   There needs to be three terminals for the exploit, repeat the following steps:<br>a.    In the terminal application, click on <strong>File&gt;New Tab</strong><br>b.    In The new terminal enter the command:               <strong>cd /security-research-pocs/vulnerabilities/dnsmasq/</strong><br>c.    Finally, run the command:                            <strong>docker exec -it <container_id> bash</strong></li>
</ol>
<hr>
<h1 id="Running-the-Exploit"><a href="#Running-the-Exploit" class="headerlink" title="Running the Exploit"></a>Running the Exploit</h1><ol>
<li>   To start the malicious DNS server enter the following commands:<br>a.    <strong>python2 CVE-2017-14491.py 127.0.0.2 53</strong><br>b.    The output should look like this:<br><img src="/images/CVE-2017-14491.png"></li>
<li>   In a different terminal, start dnsmasq by entering the following commands:<br>a.    <strong>cd src/</strong><br>b.    <strong>./dnsmasq -p 53535 –no-daemon –log-queries -S 127.0.0.2 –no-hosts –no-resolv</strong><br>c.    The output of this command should look like:<br><img src="/images/dnsmasq-start.png"></li>
<li>   Finally in the third remaining terminal enter the following command to send requests to the bad server:<br>a.    <strong>dig @localhost -p 53535 -x 8.8.8.125 &gt; /dev/null</strong><br>b.    Repeat this step by pressing the up arrow and enter<br>c.    Do this until the dnsmasq tab outputs something like this:<br><img src="/images/dnsmasq-crashes.png"></li>
<li>This collection of Z’s means that dnsmasq has crashed, which in theory would allow a threat actor to run remote code on via a buffer overflow. Google’s security team originally wrote this proof of concept on Debian Jessie Linux distribution. Unfortunately, Debian Jesse reached its end of life on June 30th 2020. To remedy this, a member of the group edited the dockerfile to update the packages and dependencies to run on modern Linux. To see if the dockerfile would run, this member rolled the DNS git repository back to 2.68. With the exploit proven, the next logical step would be to load the version of dnsmasq that is found on the GMC Sierra bench to see if it is also vulnerable. The steps are the same as the ones listed above but in a different directory. Going back to the home directory of the root user, a new directory was created: GMCTRUCKmasq. The Google POC github repository was then cloned to this directory. The same path was navigated, but instead of copying the dockerfile, the dockerfile itself was deleted. A new dockerfile was created using the command “nano Dockerfile” and the contents of the version 2.68 file were copied over. The only difference between the version 2.68 dockerfile and the version 2.5.2 dockerfile is the content ID. Git repositories allow the user to roll back a repository to an earlier version of the software using the command git Checkout. This was beneficial because although the GMC is running a vulnerable version of dnsmasq, the current repository hosted at <a href="http://thekelleys.org.uk/dnsmasq.git">http://thekelleys.org.uk/dnsmasq.git</a> has since patched this vulnerability. For the convenience of researchers attempting to recreate the steps of this experiment, a version of the dockerfile made for version 2.52 has been added below the dockerfile for version 2.68. From this point forward, the exact same steps were taken to attempt the exploit on version 2.52. After setting everything up per the instructions above, The first thing to check was that dnsmasq was running the intended version. executing ./dnsmasq -p 53535 –no-daemon –log-queries -S 127.0.0.2 –no-hosts –no-resolv shows the following output:<br><img src="/images/dnsmasq-output.png"></li>
<li>With the version of the car ensured, the next step was to send dig commands to see if it was possible to crash the dnsmasq. The result of this test was as follows:<br><img src="/images/test-output.png"></li>
</ol>
<hr>
<h1 id="Appendix-A"><a href="#Appendix-A" class="headerlink" title="Appendix A"></a>Appendix A</h1><p>Appendix A – Dnsmasq Dockerfile Fix<br>Modified from the dockerfile located at: <a href="https://github.com/google/security-research-pocs">https://github.com/google/security-research-pocs</a> (dnsmasq ver. 2.68 et. 2.52)<br><strong>Version 2.68:</strong><br>FROM debian</p>
<p>RUN apt-get update<br>RUN apt-get install -y wget git make gnupg nano python2 dnsutils</p>
<p>#Unfortunately, this key isn’t available over HTTPS.<br>RUN wget -O /tmp/llvm-snapshot.gpg.key <a href="https://apt.llvm.org/llvm-snapshot.gpg.key">https://apt.llvm.org/llvm-snapshot.gpg.key</a><br>RUN apt-key add /tmp/llvm-snapshot.gpg.key<br>RUN bash -c ‘echo “deb <a href="http://apt.llvm.org/bullseye/">http://apt.llvm.org/bullseye/</a> llvm-toolchain-bullseye-13 main” &gt;&gt; /etc/apt/sources.list’<br>RUN bash -c ‘echo “deb-src <a href="http://apt.llvm.org/bullseye/">http://apt.llvm.org/bullseye/</a> llvm-toolchain-bullseye-13 main” &gt;&gt; /etc/apt/sources.list’<br>RUN apt-get update<br>RUN apt-get install -y libllvm-13-ocaml-dev libllvm13 llvm-13 llvm-13-dev llvm-13-doc llvm-13-examples llvm-13-runtime clang-13 clang-tools-13 clang-13-doc libclang-common-13-dev libclang-13-dev libclang1-13 clang-format-13 python3-clang-13 clangd-13 clang-tidy-13 libfuzzer-13-dev lldb-13 lld-13 libclc-13-dev libfuzzer-13-dev libc++-13-dev libc++abi-13-dev</p>
<p>ENV CFLAGS=”-O1 -g -fsanitize=address,bool,float-cast-overflow,integer-divide-by-zero,return,returns-nonnull-attribute,shift-exponent,signed-integer-overflow,unreachable,vla-bound -fno-sanitize-recover=all -fno-omit-frame-pointer -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1”<br>ENV CXXFLAGS=”-O1 -g -fsanitize=address,bool,float-cast-overflow,integer-divide-by-zero,return,returns-nonnull-attribute,shift-exponent,signed-integer-overflow,unreachable,vla-bound -fno-sanitize-recover=all -fno-omit-frame-pointer -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1”<br>ENV LDFLAGS=”-g -fsanitize=address,bool,float-cast-overflow,integer-divide-by-zero,return,returns-nonnull-attribute,shift-exponent,signed-integer-overflow,unreachable,vla-bound”<br>ENV CC=”/usr/bin/clang-13”<br>ENV CXX=”/usr/bin/clang++-13”<br>ENV ASAN_OPTIONS=”exitcode=1,handle_segv=1,detect_leaks=1,leak_check_at_exit=1,allocator_may_return_null=1,detect_odr_violation=0”<br>ENV ASAN_SYMBOLIZER_PATH=”/usr/lib/llvm-13/bin/llvm-symbolizer”</p>
<p>RUN bash -c ‘echo “export CFLAGS=&quot;${CFLAGS}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export CXXFLAGS=&quot;${CXXFLAGS}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export LDFLAGS=&quot;${LDFLAGS}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export CC=&quot;${CC}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export CXX=&quot;${CXX}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export CXXFLAGS=&quot;${CXXFLAGS}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export ASAN_OPTIONS=&quot;${ASAN_OPTIONS}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export ASAN_SYMBOLIZER_PATH=&quot;${ASAN_SYMBOLIZER_PATH}&quot;“ &gt;&gt; /root/.bashrc’</p>
<p>WORKDIR /test<br>RUN git clone git://thekelleys.org.uk/dnsmasq.git<br>WORKDIR /test/dnsmasq<br>#switch to 2.6.8<br>RUN git checkout 56ad6c9be1b48791edfb140f87c3738dd723d116<br>#Patch Makefile so we can compile with ASAN<br>RUN sed -i’’ ‘s/LDFLAGS       =/LDFLAGS       ?=/‘ Makefile<br>RUN sed -i’’ ‘s/CFLAGS        =/CFLAGS        ?=/‘ Makefile<br>RUN make</p>
<p>#Only the last ENTRYPOINT or CMD is honored, so this can be overridden.<br>ENTRYPOINT /bin/bash</p>
<p><strong>Version 2.5.2</strong><br>FROM debian</p>
<p>RUN apt-get update<br>RUN apt-get install -y wget git make gnupg nano python2 dnsutils</p>
<p>#Unfortunately, this key isn’t available over HTTPS.<br>RUN wget -O /tmp/llvm-snapshot.gpg.key <a href="https://apt.llvm.org/llvm-snapshot.gpg.key">https://apt.llvm.org/llvm-snapshot.gpg.key</a><br>RUN apt-key add /tmp/llvm-snapshot.gpg.key<br>RUN bash -c ‘echo “deb <a href="http://apt.llvm.org/bullseye/">http://apt.llvm.org/bullseye/</a> llvm-toolchain-bullseye-13 main” &gt;&gt; /etc/apt/sources.list’<br>RUN bash -c ‘echo “deb-src <a href="http://apt.llvm.org/bullseye/">http://apt.llvm.org/bullseye/</a> llvm-toolchain-bullseye-13 main” &gt;&gt; /etc/apt/sources.list’<br>RUN apt-get update<br>RUN apt-get install -y libllvm-13-ocaml-dev libllvm13 llvm-13 llvm-13-dev llvm-13-doc llvm-13-examples llvm-13-runtime clang-13 clang-tools-13 clang-13-doc libclang-common-13-dev libclang-13-dev libclang1-13 clang-format-13 python3-clang-13 clangd-13 clang-tidy-13 libfuzzer-13-dev lldb-13 lld-13 libclc-13-dev libfuzzer-13-dev libc++-13-dev libc++abi-13-dev</p>
<p>ENV CFLAGS=”-O1 -g -fsanitize=address,bool,float-cast-overflow,integer-divide-by-zero,return,returns-nonnull-attribute,shift-exponent,signed-integer-overflow,unreachable,vla-bound -fno-sanitize-recover=all -fno-omit-frame-pointer -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1”<br>ENV CXXFLAGS=”-O1 -g -fsanitize=address,bool,float-cast-overflow,integer-divide-by-zero,return,returns-nonnull-attribute,shift-exponent,signed-integer-overflow,unreachable,vla-bound -fno-sanitize-recover=all -fno-omit-frame-pointer -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1”<br>ENV LDFLAGS=”-g -fsanitize=address,bool,float-cast-overflow,integer-divide-by-zero,return,returns-nonnull-attribute,shift-exponent,signed-integer-overflow,unreachable,vla-bound”<br>ENV CC=”/usr/bin/clang-13”<br>ENV CXX=”/usr/bin/clang++-13”<br>ENV ASAN_OPTIONS=”exitcode=1,handle_segv=1,detect_leaks=1,leak_check_at_exit=1,allocator_may_return_null=1,detect_odr_violation=0”<br>ENV ASAN_SYMBOLIZER_PATH=”/usr/lib/llvm-13/bin/llvm-symbolizer”</p>
<p>RUN bash -c ‘echo “export CFLAGS=&quot;${CFLAGS}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export CXXFLAGS=&quot;${CXXFLAGS}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export LDFLAGS=&quot;${LDFLAGS}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export CC=&quot;${CC}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export CXX=&quot;${CXX}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export CXXFLAGS=&quot;${CXXFLAGS}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export ASAN_OPTIONS=&quot;${ASAN_OPTIONS}&quot;“ &gt;&gt; /root/.bashrc’<br>RUN bash -c ‘echo “export ASAN_SYMBOLIZER_PATH=&quot;${ASAN_SYMBOLIZER_PATH}&quot;“ &gt;&gt; /root/.bashrc’</p>
<p>WORKDIR /test<br>RUN git clone git://thekelleys.org.uk/dnsmasq.git<br>WORKDIR /test/dnsmasq<br>#switch to 2.52<br>RUN git checkout 316e2730acfc439c6bb12beb7c286daffb3cac4e<br>#Patch Makefile so we can compile with ASAN<br>RUN sed -i’’ ‘s/LDFLAGS       =/LDFLAGS       ?=/‘ Makefile<br>RUN sed -i’’ ‘s/CFLAGS        =/CFLAGS        ?=/‘ Makefile<br>RUN make</p>
<p>#Only the last ENTRYPOINT or CMD is honored, so this can be overridden.<br>ENTRYPOINT /bin/bash</p>
<hr>
<h1 id="Acknowledgments"><a href="#Acknowledgments" class="headerlink" title="Acknowledgments"></a>Acknowledgments</h1><h2 id="Thanks-for-the-efforts-from-all-of-my-American-group-members"><a href="#Thanks-for-the-efforts-from-all-of-my-American-group-members" class="headerlink" title="Thanks for the efforts from all of my American group members."></a>Thanks for the efforts from all of my American group members.</h2><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><p>Google.(2021, March 12). security-research-pocs. Retrieved from GitHub : <a href="https://github.com/google/security-research-pocs">https://github.com/google/security-research-pocs</a> </p>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Troubleshooting</tag>
        <tag>Kali</tag>
        <tag>CVE</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
